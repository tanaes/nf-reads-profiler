params {
    config_profile_name        = 'Full test profile, local cloud storage'
    config_profile_description = 'Azure BATCH Cloud Profile'
    config_profile_contact = 'Venkat Malladi (@vsmalladi) & Adam Talbot (@adamrtalbot)'
    config_profile_url = 'https://azure.microsoft.com/services/batch/'
 
    // Storage
    storage_name      = null
    storage_key       = null
    storage_sas       = null
 
    // Batch
    az_location       = "eastus"
    batch_name        = null
    batch_key         = null
 
    autopoolmode      = false
    allowpoolcreation = true
    deletejobs        = true
    deletepools       = true
 
    // ACR
    acr_registry      = null
    acr_username      = null
    acr_password      = null

    // Shared files
 
}

    
process {

    maxRetries = 5
    cleanup = true
    cache = false
    executor = "azurebatch"
    queue = 'Standard_A2_v2'
    cpus = 2
    memory = 4.GB
    time = '4.h'

    withName: merge_paired_end_cleaned
    {
        queue = 'Standard_D4s_v3'
        time =  '4h'
        cpus = 4
        memory = '16 GB'
        errorStrategy = 'retry'
    }

    withName: profile_taxa
    {
        queue = 'Standard_E8s_v3'
        time =  '12h'
        cpus = 8
        memory = '64 GB'
        errorStrategy = 'retry'
    }

    withName: profile_function
    {
        queue = 'Standard_E16s_v3'
        time =  '48h'
        cpus = 16
        memory = '128 GB'
        errorStrategy = 'retry'
    }

    withName: log
    {
        queue = 'Standard_A2_v2'
        time =  '30m'
        cpus = 2
        memory = '4 GB'
        errorStrategy = 'ignore'
    }
}

azure {
    storage {
        accountName = params.storage_name
        accountKey  = params.storage_key
        sasToken    = params.storage_sas
        fileShares {
            'metagenome-dbs' {
                mountPath = "/dbs"}
        }
    }
    batch {
        location                = params.az_location
        accountName             = params.batch_name
        accountKey              = params.batch_key
        tokenDuration           = "24h"
        autoPoolMode            = params.autopoolmode
        allowPoolCreation       = params.allowpoolcreation
        deleteJobsOnCompletion  = params.deletejobs
        deletePoolsOnCompletion = params.deletepools
        pools {
            Standard_A1_v2 {
                autoScale = true
                vmType = 'Standard_A1_v2'
                vmCount = 2
                maxVmCount = 20
            }
            Standard_A2_v2 {
                autoScale = true
                vmType = 'Standard_A2_v2'
                vmCount = 2
                maxVmCount = 20
            }
            Standard_A4_v2 {
                autoScale = true
                vmType = 'Standard_A4_v2'
                vmCount = 2
                maxVmCount = 20
            }
            Standard_D2s_v3 {
                autoScale = true
                vmType = 'Standard_D2s_v3'
                vmCount = 1
                maxVmCount = 20
            }
            Standard_D4s_v3 {
                autoScale = true
                vmType = 'Standard_D4s_v3'
                vmCount = 1
                maxVmCount = 20
            }
            Standard_D8s_v3 {
                autoScale = true
                vmType = 'Standard_D8s_v3'
                vmCount = 1
                maxVmCount = 20
            }
            Standard_E8s_v3 {
                autoScale = true
                vmType = 'Standard_E8s_v3'
                vmCount = 1
                maxVmCount = 20
            }
            Standard_E4s_v3 {
                autoScale = true
                vmType = 'Standard_E4s_v3'
                vmCount = 1
                maxVmCount = 20
            }
            Standard_E16s_v3 {
                autoScale = true
                vmType = 'Standard_E16s_v3'
                vmCount = 1
                maxVmCount = 20
            }
        }
    }
    registry {
        server   = params.acr_registry
        userName = params.acr_username
        password = params.acr_password
    }
}

