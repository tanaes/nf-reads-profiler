params {
    config_profile_name        = 'Full test profile, local cloud storage'
    config_profile_description = 'Azure BATCH Cloud Profile'
    config_profile_contact = 'Venkat Malladi (@vsmalladi) & Adam Talbot (@adamrtalbot)'
    config_profile_url = 'https://azure.microsoft.com/services/batch/'
 
    // Storage
    storage_name      = null
    storage_key       = null
    storage_sas       = null
 
    // Batch
    az_location       = "eastus"
    batch_name        = null
    batch_key         = null
 
    autopoolmode      = false
    allowpoolcreation = true
    deletejobs        = true
    deletepools       = false
 
    // ACR
    acr_registry      = null
    acr_username      = null
    acr_password      = null

    // Shared files
 
}

    
process {

    maxRetries = 3
    cleanup = true
    cache = true
    executor = "azurebatch"
    queue = 'Standard_E4s_v3'
    cpus = 4
    memory = 32.GB
    time = '4.h'
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    
    withName: 'AWS_DOWNLOAD' {
        queue = 'Standard_E4s_v3'
        time = '2h'
        cpus = 4
        memory = '32 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: 'FASTERQ_DUMP' {
        queue = 'Standard_E8ads_v5'
        time = '4h'
        cpus = 8
        memory = '64 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }
    withLabel: fastp
    {
        queue = 'Standard_E4ads_v5'
        time = '2h'
        cpus = 4
        memory = '32 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: profile_taxa
    {
        queue = 'Standard_D8ads_v5'
        time =  '4h'
        cpus = 8
        memory = '32 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: profile_function
    {
        queue = 'Standard_E8ads_v5'
        time =  '36h'
        cpus = 8
        memory = '64 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: combine_humann_tables
    {
        queue = 'Standard_E8s_v3'
        time =  '1h'
        cpus = 8
        memory = '64 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: combine_metaphlan_tables
    {
        queue = 'Standard_E8s_v3'
        time =  '1h'
        cpus = 8
        memory = '64 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }

    withName: MULTIQC
    {
        queue = 'Standard_E32s_v3'
        time =  '4h'
        cpus = 32
        memory = '256 GB'
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    }
}


// Define a closure that accepts parameters and returns a formatted autoscale formula string.
def getCommonScaleFormula = { int cappedPoolSize = 20, int maxSpotNodes = 10 ->
    return """
        // Get pending tasks for the past 15 minutes.
        \$samples = \$ActiveTasks.GetSamplePercent(TimeInterval_Minute * 15);
        
        // If we have fewer than 70% data points, use the last sample; otherwise,
        // use the maximum of the last sample and the 15-minute average.
        \$tasks = \$samples < 70 ? max(0, \$ActiveTasks.GetSample(1)) : 
            max(\$ActiveTasks.GetSample(1), avg(\$ActiveTasks.GetSample(TimeInterval_Minute * 15)));
        
        // If pending tasks > 0, set targetVMs to tasks; otherwise, fall back to half of the current dedicated nodes.
        \$targetVMs = \$tasks > 0 ? \$tasks : max(0, \$TargetDedicatedNodes / 2);
        
        // Cap the pool size.
        cappedPoolSize = ${cappedPoolSize};
        desiredTotal = max(0, min(\$targetVMs, cappedPoolSize));
        
        // Partition the desired total between low-priority (spot) and dedicated nodes.
        // Up to maxSpotNodes (here, ${maxSpotNodes}) will be allocated as low-priority.
        \$TargetLowPriorityNodes = desiredTotal <= ${maxSpotNodes} ? desiredTotal : ${maxSpotNodes};
        \$TargetDedicatedNodes = desiredTotal > ${maxSpotNodes} ? desiredTotal - ${maxSpotNodes} : 0;
        
        // Set node deallocation mode - nodes are kept active only until tasks finish.
        \$NodeDeallocationOption = taskcompletion;
    """
}

executor {
    // Limits the number of tasks that are submitted concurrently
    queueSize = 1000
}

azure {
    managedIdentity {
        system = true
    }
    storage {
        accountName = params.storage_name
        accountKey  = params.storage_key
        sasToken    = params.storage_sas
        tokenDuration = '30d'
        fileShares {
            'metagenome-dbs' {
                mountPath = "/dbs/metagenometest/metagenome-dbs"}
        }
    }
    batch {
        location                = params.az_location
        accountName             = params.batch_name
        accountKey              = params.batch_key
        tokenDuration           = "24h"
        autoPoolMode            = params.autopoolmode
        allowPoolCreation       = params.allowpoolcreation
        deleteJobsOnCompletion  = params.deletejobs
        deletePoolsOnCompletion = params.deletepools
        pools {
            Standard_E4s_v3 {
                autoScale = true
                vmType = 'Standard_E4s_v3'
                vmCount = 4
                maxVmCount = 256
            }
            Standard_E8s_v3 {
                autoScale = true
                vmType = 'Standard_E8s_v3'
                vmCount = 2
                maxVmCount = 64
            }
            Standard_E4ads_v5 {
                autoScale = true
                vmType = 'Standard_E4ads_v5'
                vmCount = 2
                maxVmCount = 160
            }
            Standard_E8ads_v5 {
                autoScale = true
                vmType = 'Standard_E8ads_v5'
                vmCount = 2
                maxVmCount = 256
            }
            Standard_D8ads_v5 {
                autoScale = true
                vmType = 'Standard_D8ads_v5'
                vmCount = 2
                maxVmCount = 128
                lowPriority = true
            } 
            Standard_E32s_v3 {
                autoScale = true
                vmType = 'Standard_E32s_v3'
                vmCount = 2
                maxVmCount = 8
            }

        }
    }
    registry {
        server   = params.acr_registry
        userName = params.acr_username
        password = params.acr_password
    }
}

