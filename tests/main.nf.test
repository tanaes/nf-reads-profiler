nextflow_pipeline {
    name "Test nf-reads-profiler pipeline"
    script "main.nf"
    config "conf/test.config"
    
    test("Should run paired-end analysis with local files") {
        tag "local"
        setup {
            // Create samplesheet with SRA accessions
            def samplesheet = file("$outputDir/samplesheet-local.csv")
            samplesheet.text = """sample,fastq_1,fastq_2,study_accession
test_pe_1,$projectDir/assets/test_data/SRX122150_SRR413772_1.fastq.gz,$projectDir/assets/test_data/SRX122150_SRR413772_2.fastq.gz,STUDY1
test_pe_2,$projectDir/assets/test_data/SRX122151_SRR413773_1.fastq.gz,$projectDir/assets/test_data/SRX122151_SRR413773_2.fastq.gz,STUDY1
test_pe_3,$projectDir/assets/test_data/SRX4954909_SRR8133838_1.fastq.gz,$projectDir/assets/test_data/SRX4954909_SRR8133838_2.fastq.gz,STUDY2
test_pe_4,$projectDir/assets/test_data/SRX4954910_SRR8133837_1.fastq.gz,$projectDir/assets/test_data/SRX4954910_SRR8133837_2.fastq.gz,STUDY2"""
        }
        when {
            params {
                input = "$outputDir/samplesheet-local.csv"
                project = "test_pe"
                outdir = "$outputDir"
                annotation = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path("$outputDir/test_pe/STUDY1/taxa").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function").exists() },
                { assert path("$outputDir/test_pe/STUDY2/taxa").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function").exists() },
                
                // Check taxa outputs
                { assert path("$outputDir/test_pe/STUDY1/taxa/test_pe_1_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/taxa/test_pe_2_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/taxa/STUDY1_bugs_list_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/taxa/test_pe_3_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/taxa/test_pe_4_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/taxa/STUDY2_bugs_list_combined.tsv").exists() },

                // Check function outputs
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_1_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_1_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_1_pathabundance.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_2_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_2_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/test_pe_2_pathabundance.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_4_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_4_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_4_pathabundance.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_3_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_3_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/test_pe_3_pathabundance.tsv").exists() },

                // Check combined function outputs
                { assert path("$outputDir/test_pe/STUDY1/function/STUDY1_genefamilies_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/STUDY1_pathcoverage_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY1/function/STUDY1_pathabundance_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/STUDY2_genefamilies_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/STUDY2_pathcoverage_combined.tsv").exists() },
                { assert path("$outputDir/test_pe/STUDY2/function/STUDY2_pathabundance_combined.tsv").exists() }
            )
        }
    }

    test("Should filter samples with too few reads") {
        tag "read_filter"
        when {
            params {
                input = "$projectDir/assets/samplesheet-test-local-filter.csv"
                project = "test_filter"
                outdir = "$outputDir"
                annotation = true
                minreads = 5000  // Set threshold above the filtered sample's read count
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check that read counts are generated for all samples
                { assert path("$outputDir/test_filter/STUDY1/test_pe_1_readcount.txt").exists() },
                { assert path("$outputDir/test_filter/STUDY1/test_pe_2_readcount.txt").exists() },
                { assert path("$outputDir/test_filter/STUDY1/test_pe_smol_1_readcount.txt").exists() },
                
                // Verify read counts
                { assert path("$outputDir/test_filter/STUDY1/test_pe_smol_1_readcount.txt").text.trim().toInteger() < 5000 },
                
                // Check that only passing samples are processed
                { assert path("$outputDir/test_filter/STUDY1/taxa/test_pe_1_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_filter/STUDY1/taxa/test_pe_2_metaphlan_bugs_list.tsv").exists() },
                { assert !path("$outputDir/test_filter/STUDY1/taxa/test_pe_smol_1_metaphlan_bugs_list.tsv").exists() }
            )
        }
    }

    test("Should run analysis with SRA download") {
        tag "SRA"
        setup {
            // Create samplesheet with SRA accessions
            def samplesheet = file("$outputDir/samplesheet-sra.csv")
            samplesheet.text = """sample,fastq_1,fastq_2,sra_accession,study_accession
test_sra_1,,,SRR6664374,STUDY_SRA
test_sra_2,,,SRR6664342,STUDY_SRA"""
        }

        when {
            params {
                input = "$outputDir/samplesheet-sra.csv"
                project = "test_sra"
                outdir = "$outputDir"
                annotation = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path("$outputDir/test_sra/STUDY_SRA/taxa").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function").exists() },
                
                // Check taxa outputs
                { assert path("$outputDir/test_sra/STUDY_SRA/taxa/test_sra_1_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/taxa/test_sra_2_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/taxa/STUDY_SRA_bugs_list_combined.tsv").exists() },

                // Check function outputs
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_1_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_1_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_1_pathabundance.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_2_genefamilies.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_2_pathcoverage.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/test_sra_2_pathabundance.tsv").exists() },

                // Check combined function outputs
                { assert path("$outputDir/test_sra/STUDY_SRA/function/STUDY_SRA_genefamilies_combined.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/STUDY_SRA_pathcoverage_combined.tsv").exists() },
                { assert path("$outputDir/test_sra/STUDY_SRA/function/STUDY_SRA_pathabundance_combined.tsv").exists() }
            )
        }
    }

    test("Should handle mixed local and SRA inputs") {
        tag "SRA and local"
        setup {
            // Create samplesheet with both local files and SRA accessions
            def samplesheet = file("$outputDir/samplesheet-mixed.csv")
            samplesheet.text = """sample,fastq_1,fastq_2,sra_accession,study_accession
test_local,$projectDir/assets/test_data/SRX122150_SRR413772_1.fastq.gz,$projectDir/assets/test_data/SRX122150_SRR413772_2.fastq.gz,,STUDY_MIXED
test_sra,,,SRR6664374,STUDY_MIXED"""
        }

        when {
            params {
                input = "$outputDir/samplesheet-mixed.csv"
                project = "test_mixed"
                outdir = "$outputDir"
                annotation = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/function").exists() },
                
                // Check both local and downloaded files are processed
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa/test_local_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa/test_sra_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/function/STUDY_MIXED_genefamilies_combined.tsv").exists() }
            )
        }
    }


    test("Should handle mixed local and SRA inputs with single-ended") {
        tag "SRA and local combined ended"
        setup {
            // Create samplesheet with both local files and SRA accessions
            def samplesheet = file("$outputDir/samplesheet-mixed-12.csv")
            samplesheet.text = """sample,fastq_1,fastq_2,sra_accession,study_accession
test_local,$projectDir/assets/test_data/SRX122150_SRR413772_1.fastq.gz,$projectDir/assets/test_data/SRX122150_SRR413772_2.fastq.gz,,STUDY_MIXED
test_sra_double,,,SRR6664374,STUDY_MIXED
test_sra_single,,,ERR4775947,STUDY_MIXED
"""
        }

        when {
            params {
                input = "$outputDir/samplesheet-mixed-12.csv"
                project = "test_mixed"
                outdir = "$outputDir"
                annotation = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/function").exists() },
                
                // Check both local and downloaded files are processed
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa/test_local_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/taxa/test_sra_metaphlan_bugs_list.tsv").exists() },
                { assert path("$outputDir/test_mixed/STUDY_MIXED/function/STUDY_MIXED_genefamilies_combined.tsv").exists() }
            )
        }
    }

    test("Should handle SRA sample with three output files correctly") {
        tag "sra-three-files"

        setup {
            // Create samplesheet with SRR17001000 which produces 3 files
            def samplesheet = file("$outputDir/samplesheet-sra-three.csv")
            samplesheet.text = """sample,fastq_1,fastq_2,sra_accession,study_accession
    test_sra_triple,,,SRR17001000,STUDY1"""
        }

        when {
            params {
                input = "$outputDir/samplesheet-sra-three.csv"
                project = "test_sra_three"
                outdir = "$outputDir"
                annotation = true
            }
        }


        then {
            assertAll(
                { assert workflow.success },
                
                // Check that SRA download worked and produced expected files
                { assert path("$outputDir/test_sra_three/STUDY1/taxa").exists() },
                { assert path("$outputDir/test_sra_three/STUDY1/taxa/test_sra_triple_metaphlan_bugs_list.tsv").exists() },
                
                // Find the FASTERQ_DUMP work directory and verify its outputs
                { 
                    def fasterq_dirs = workflow.trace.tasks()
                        .findAll { it.name == 'FASTERQ_DUMP' }
                        .collect { it.workDir }
                    
                    assert fasterq_dirs.size() == 1
                    
                    def processed_dir = path("${fasterq_dirs[0]}/processed")
                    assert processed_dir.exists()
                    
                    def processed_files = processed_dir.listFiles()
                        .collect { it.name }
                        .sort()
                    
                    // Verify we got exactly two reads and they're in the correct order
                    assert processed_files.size() == 2
                    assert processed_files[0].endsWith('_1.fastq.gz')
                    assert processed_files[1].endsWith('_2.fastq.gz')
                }
            )
        }
    }
}